// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: employee.proto

package employee

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GreeterEmployees_Create_FullMethodName = "/employees.GreeterEmployees/Create"
	GreeterEmployees_Search_FullMethodName = "/employees.GreeterEmployees/Search"
)

// GreeterEmployeesClient is the client API for GreeterEmployees service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterEmployeesClient interface {
	Create(ctx context.Context, in *EmployeeCreateRequest, opts ...grpc.CallOption) (*EmployeeCreateResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
}

type greeterEmployeesClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterEmployeesClient(cc grpc.ClientConnInterface) GreeterEmployeesClient {
	return &greeterEmployeesClient{cc}
}

func (c *greeterEmployeesClient) Create(ctx context.Context, in *EmployeeCreateRequest, opts ...grpc.CallOption) (*EmployeeCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeeCreateResponse)
	err := c.cc.Invoke(ctx, GreeterEmployees_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterEmployeesClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, GreeterEmployees_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterEmployeesServer is the server API for GreeterEmployees service.
// All implementations must embed UnimplementedGreeterEmployeesServer
// for forward compatibility.
type GreeterEmployeesServer interface {
	Create(context.Context, *EmployeeCreateRequest) (*EmployeeCreateResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	mustEmbedUnimplementedGreeterEmployeesServer()
}

// UnimplementedGreeterEmployeesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreeterEmployeesServer struct{}

func (UnimplementedGreeterEmployeesServer) Create(context.Context, *EmployeeCreateRequest) (*EmployeeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGreeterEmployeesServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedGreeterEmployeesServer) mustEmbedUnimplementedGreeterEmployeesServer() {}
func (UnimplementedGreeterEmployeesServer) testEmbeddedByValue()                          {}

// UnsafeGreeterEmployeesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterEmployeesServer will
// result in compilation errors.
type UnsafeGreeterEmployeesServer interface {
	mustEmbedUnimplementedGreeterEmployeesServer()
}

func RegisterGreeterEmployeesServer(s grpc.ServiceRegistrar, srv GreeterEmployeesServer) {
	// If the following call pancis, it indicates UnimplementedGreeterEmployeesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GreeterEmployees_ServiceDesc, srv)
}

func _GreeterEmployees_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterEmployeesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreeterEmployees_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterEmployeesServer).Create(ctx, req.(*EmployeeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreeterEmployees_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterEmployeesServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreeterEmployees_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterEmployeesServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GreeterEmployees_ServiceDesc is the grpc.ServiceDesc for GreeterEmployees service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreeterEmployees_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "employees.GreeterEmployees",
	HandlerType: (*GreeterEmployeesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GreeterEmployees_Create_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _GreeterEmployees_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "employee.proto",
}
