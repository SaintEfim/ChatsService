// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	dto "ChatsService/internal/models/dto"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ChatController is an autogenerated mock type for the ChatController type
type ChatController struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, model
func (_m *ChatController) Create(ctx context.Context, model *dto.ChatCreate) (*dto.CreateAction, error) {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *dto.CreateAction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ChatCreate) (*dto.CreateAction, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ChatCreate) *dto.CreateAction); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateAction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ChatCreate) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ChatController) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx
func (_m *ChatController) Get(ctx context.Context) ([]*dto.Chat, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []*dto.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*dto.Chat, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*dto.Chat); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatsByUserId provides a mock function with given fields: ctx, userId
func (_m *ChatController) GetChatsByUserId(ctx context.Context, userId uuid.UUID) ([]*dto.Chat, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetChatsByUserId")
	}

	var r0 []*dto.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*dto.Chat, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*dto.Chat); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneById provides a mock function with given fields: ctx, id
func (_m *ChatController) GetOneById(ctx context.Context, id uuid.UUID) (*dto.ChatDetail, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOneById")
	}

	var r0 *dto.ChatDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dto.ChatDetail, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dto.ChatDetail); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ChatDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, model
func (_m *ChatController) Update(ctx context.Context, id uuid.UUID, model *dto.ChatUpdate) error {
	ret := _m.Called(ctx, id, model)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *dto.ChatUpdate) error); ok {
		r0 = rf(ctx, id, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChatController creates a new instance of ChatController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatController(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatController {
	mock := &ChatController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
