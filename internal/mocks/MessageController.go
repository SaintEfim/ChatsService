// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	dto "ChatsService/internal/models/dto"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MessageController is an autogenerated mock type for the MessageController type
type MessageController struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, model
func (_m *MessageController) Create(ctx context.Context, model *dto.MessageCreate) (*dto.Message, error) {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *dto.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.MessageCreate) (*dto.Message, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.MessageCreate) *dto.Message); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.MessageCreate) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MessageController) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx
func (_m *MessageController) Get(ctx context.Context) ([]*dto.Message, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []*dto.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*dto.Message, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*dto.Message); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessagesByChatId provides a mock function with given fields: ctx, chatId
func (_m *MessageController) GetMessagesByChatId(ctx context.Context, chatId uuid.UUID) ([]*dto.Message, error) {
	ret := _m.Called(ctx, chatId)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagesByChatId")
	}

	var r0 []*dto.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*dto.Message, error)); ok {
		return rf(ctx, chatId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*dto.Message); ok {
		r0 = rf(ctx, chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneById provides a mock function with given fields: ctx, id
func (_m *MessageController) GetOneById(ctx context.Context, id uuid.UUID) (*dto.Message, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOneById")
	}

	var r0 *dto.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dto.Message, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dto.Message); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, model
func (_m *MessageController) Update(ctx context.Context, id uuid.UUID, model *dto.MessageUpdate) error {
	ret := _m.Called(ctx, id, model)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *dto.MessageUpdate) error); ok {
		r0 = rf(ctx, id, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMessageController creates a new instance of MessageController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageController {
	mock := &MessageController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
