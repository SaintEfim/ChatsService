// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	employee "ChatsService/proto/employee"
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// GreeterEmployeesClient is an autogenerated mock type for the GreeterEmployeesClient type
type GreeterEmployeesClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, in, opts
func (_m *GreeterEmployeesClient) Create(ctx context.Context, in *employee.EmployeeCreateRequest, opts ...grpc.CallOption) (*employee.EmployeeCreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *employee.EmployeeCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *employee.EmployeeCreateRequest, ...grpc.CallOption) (*employee.EmployeeCreateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *employee.EmployeeCreateRequest, ...grpc.CallOption) *employee.EmployeeCreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*employee.EmployeeCreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *employee.EmployeeCreateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx, in, opts
func (_m *GreeterEmployeesClient) Search(ctx context.Context, in *employee.SearchRequest, opts ...grpc.CallOption) (*employee.SearchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 *employee.SearchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *employee.SearchRequest, ...grpc.CallOption) (*employee.SearchResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *employee.SearchRequest, ...grpc.CallOption) *employee.SearchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*employee.SearchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *employee.SearchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGreeterEmployeesClient creates a new instance of GreeterEmployeesClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGreeterEmployeesClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GreeterEmployeesClient {
	mock := &GreeterEmployeesClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
