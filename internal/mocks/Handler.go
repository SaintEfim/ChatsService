// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// Handler is an autogenerated mock type for the Handler type
type Handler[T interface{}] struct {
	mock.Mock
}

// ConfigureRoutes provides a mock function with given fields: r
func (_m *Handler[T]) ConfigureRoutes(r *gin.Engine) {
	_m.Called(r)
}

// Delete provides a mock function with given fields: c
func (_m *Handler[T]) Delete(c *gin.Context) {
	_m.Called(c)
}

// Get provides a mock function with given fields: c
func (_m *Handler[T]) Get(c *gin.Context) {
	_m.Called(c)
}

// GetOneById provides a mock function with given fields: c
func (_m *Handler[T]) GetOneById(c *gin.Context) {
	_m.Called(c)
}

// Update provides a mock function with given fields: c
func (_m *Handler[T]) Update(c *gin.Context) {
	_m.Called(c)
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler[T] {
	mock := &Handler[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
